var _;

_ = require('lodash');

angular.module('angular-slick', []).directive('slick', [
  '$timeout', function($timeout) {
    return {
      restrict: 'AEC',
      scope: {
        initOnload: "@",
        data: "=",
        currentIndex: "=",
        accessibility: "@",
        adaptiveHeight: "@",
        autoplay: "@",
        autoplaySpeed: "@",
        arrows: "@",
        asNavFor: "@",
        appendArrows: "@",
        prevArrow: "@",
        nextArrow: "@",
        centerMode: "@",
        centerPadding: "@",
        cssEase: "@",
        customPaging: "&",
        dots: "@",
        draggable: "=",
        fade: "@",
        focusOnSelect: "@",
        easing: "@",
        edgeFriction: "@",
        infinite: "@",
        initialSlide: "=",
        lazyLoad: "@",
        mobileFirst: "@",
        pauseOnHover: "@",
        pauseOnDotsHover: "@",
        respondTo: "@",
        responsive: "=",
        slide: "@",
        slidesToShow: "@",
        slidesToScroll: "@",
        speed: "@",
        swipe: "@",
        swipeToSlide: "@",
        touchMove: "@",
        touchThreshold: "@",
        useCSS: "@",
        variableWidth: "@",
        vertical: "@",
        rtl: "@",
        onAfterChange: '&',
        onBeforeChange: '&',
        onEdge: '&',
        onInit: '&',
        onReInit: '&',
        onSetPosition: '&',
        onSwipe: '&'
      },
      link: function($scope, elem, attrs) {
        var currentIndexWatch, destroySlick, initializeSlick, isInitialized, slider;
        slider = null;
        $scope.$watch('draggable', function() {
          if (!slider) {
            return;
          }
          if (_.isUndefined(!$scope.draggable)) {
            return;
          }
          return slider.slick('slickSetOption', 'draggable', $scope.draggable, false);
        });
        currentIndexWatch = function() {};
        destroySlick = function() {
          return $timeout(function() {
            currentIndexWatch();
            slider = $(elem);
            slider.slick('unslick');
            slider.find('.slick-list').remove();
            return slider;
          });
        };
        initializeSlick = function() {
          return $timeout(function() {
            var customPaging;
            slider = $(elem);
            customPaging = void 0;
            if (attrs.customPaging) {
              customPaging = function(slick, index) {
                return $scope.customPaging({
                  slick: slick,
                  index: index
                });
              };
            }
            slider.slick({
              accessibility: $scope.accessibility !== 'false',
              adaptiveHeight: $scope.adaptiveHeight === 'true',
              autoplay: $scope.autoplay === 'true',
              autoplaySpeed: $scope.autoplaySpeed != null ? parseInt($scope.autoplaySpeed, 10) : 3000,
              arrows: $scope.arrows !== 'false',
              asNavFor: $scope.asNavFor ? $scope.asNavFor : void 0,
              appendArrows: $scope.appendArrows ? $($scope.appendArrows) : $(elem),
              prevArrow: $scope.prevArrow ? $scope.prevArrow : void 0,
              nextArrow: $scope.nextArrow ? $scope.nextArrow : void 0,
              centerMode: $scope.centerMode === 'true',
              centerPadding: $scope.centerPadding || '50px',
              cssEase: $scope.cssEase || 'ease',
              customPaging: customPaging,
              dots: $scope.dots === 'true',
              draggable: _.isUndefined($scope.draggable) ? true : $scope.draggable,
              fade: $scope.fade === 'true',
              focusOnSelect: $scope.focusOnSelect === 'true',
              easing: $scope.easing || 'linear',
              edgeFriction: Number($scope.edgeFriction || 0.15),
              infinite: $scope.infinite !== 'false',
              initialSlide: $scope.initialSlide || 0,
              lazyLoad: $scope.lazyLoad || 'ondemand',
              mobileFirst: $scope.mobileFirst === 'true',
              pauseOnHover: $scope.pauseOnHover !== 'false',
              pauseOnDotsHover: $scope.pauseOnDotsHover === 'true',
              respondTo: $scope.respondTo || 'window',
              responsive: $scope.responsive || void 0,
              slide: $scope.slide || 'div',
              slidesToShow: $scope.slidesToShow != null ? parseInt($scope.slidesToShow, 10) : 1,
              slidesToScroll: $scope.slidesToScroll != null ? parseInt($scope.slidesToScroll, 10) : 1,
              speed: $scope.speed != null ? parseInt($scope.speed, 10) : 300,
              swipe: $scope.swipe !== 'false',
              swipeToSlide: $scope.swipeToSlide === 'true',
              touchMove: $scope.touchMove !== 'false',
              touchThreshold: $scope.touchThreshold ? parseInt($scope.touchThreshold, 10) : 5,
              useCSS: $scope.useCSS !== 'false',
              variableWidth: $scope.variableWidth === 'true',
              vertical: $scope.vertical === 'true',
              rtl: $scope.rtl === 'true'
            });
            slider.on('afterChange', function(e, slick, index) {
              if (attrs.onAfterChange) {
                $scope.onAfterChange({
                  event: e,
                  slick: slick,
                  index: index
                });
              }
              if ($scope.currentIndex != null) {
                return $scope.$apply(function() {
                  return $scope.currentIndex = index;
                });
              }
            });
            slider.on('beforeChange', function(e, slick, currentIndex, nextIndex) {
              if (attrs.onBeforeChange) {
                return $scope.onBeforeChange({
                  event: e,
                  slick: slick,
                  currentIndex: currentIndex,
                  nextIndex: nextIndex
                });
              }
            });
            slider.on('edge', function(e, slick, direction) {
              if (attrs.onEdge) {
                return $scope.onEdge({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            slider.on('init', function(e, slick) {
              if (attrs.onInit) {
                return $scope.onInit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('reInit', function(e, slick) {
              if (attrs.onReinit) {
                return $scope.onReinit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('setPosition', function(e, slick) {
              if (attrs.onSetPosition) {
                return $scope.onSetPosition({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('swipe', function(e, slick, direction) {
              if (attrs.onSwipe) {
                return $scope.onSwipe({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            return currentIndexWatch = $scope.$watch('currentIndex', function(newValue, oldValue) {
              if (newValue != null) {
                return slider.slick('slickGoTo', newValue);
              }
            });
          });
        };
        if ($scope.initOnload) {
          isInitialized = false;
          return $scope.$watch('data', function(newVal, oldVal) {
            if (newVal != null) {
              if (isInitialized) {
                destroySlick();
              }
              initializeSlick();
              return isInitialized = true;
            }
          });
        } else {
          return initializeSlick();
        }
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
