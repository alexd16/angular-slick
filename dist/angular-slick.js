angular.module('angular-slick', []).directive('slick', [
  '$timeout', function($timeout) {
    return {
      restrict: 'AEC',
      scope: {
        initOnload: "@",
        data: "=",
        currentIndex: "=",
        accessibility: "@",
        adaptiveHeight: "@",
        autoplay: "@",
        autoplaySpeed: "@",
        arrows: "@",
        asNavFor: "@",
        appendArrows: "@",
        prevArrow: "@",
        nextArrow: "@",
        centerMode: "@",
        centerPadding: "@",
        cssEase: "@",
        customPaging: "&",
        dots: "@",
        draggable: "@",
        fade: "@",
        focusOnSelect: "@",
        easing: "@",
        edgeFriction: "@",
        infinite: "@",
        initialSlide: "=",
        lazyLoad: "@",
        mobileFirst: "@",
        pauseOnHover: "@",
        pauseOnDotsHover: "@",
        respondTo: "@",
        responsive: "=",
        slide: "@",
        slidesToShow: "@",
        slidesToScroll: "@",
        speed: "@",
        swipe: "@",
        swipeToSlide: "@",
        touchMove: "@",
        touchThreshold: "@",
        useCSS: "@",
        variableWidth: "@",
        vertical: "@",
        rtl: "@",
        onAfterChange: '&',
        onBeforeChange: '&',
        onEdge: '&',
        onInit: '&',
        onReInit: '&',
        onSetPosition: '&',
        onSwipe: '&'
      },
      link: function($scope, elem, attrs) {
        var currentIndexWatch, destroySlick, initializeSlick, isInitialized;
        currentIndexWatch = function() {};
        destroySlick = function() {
          return $timeout(function() {
            var slider;
            currentIndexWatch();
            slider = $(elem);
            slider.slick('unslick');
            slider.find('.slick-list').remove();
            return slider;
          });
        };
        initializeSlick = function() {
          return $timeout(function() {
            var customPaging, slider;
            slider = $(elem);
            customPaging = void 0;
            if (attrs.customPaging) {
              customPaging = function(slick, index) {
                return $scope.customPaging({
                  slick: slick,
                  index: index
                });
              };
            }
            slider.slick({
              accessibility: $scope.accessibility !== 'false',
              adaptiveHeight: $scope.adaptiveHeight === 'true',
              autoplay: $scope.autoplay === 'true',
              autoplaySpeed: $scope.autoplaySpeed != null ? parseInt($scope.autoplaySpeed, 10) : 3000,
              arrows: $scope.arrows !== 'false',
              asNavFor: $scope.asNavFor ? $scope.asNavFor : void 0,
              appendArrows: $scope.appendArrows ? $($scope.appendArrows) : $(elem),
              prevArrow: $scope.prevArrow ? $scope.prevArrow : void 0,
              nextArrow: $scope.nextArrow ? $scope.nextArrow : void 0,
              centerMode: $scope.centerMode === 'true',
              centerPadding: $scope.centerPadding || '50px',
              cssEase: $scope.cssEase || 'ease',
              customPaging: customPaging,
              dots: $scope.dots === 'true',
              draggable: $scope.draggable !== 'false',
              fade: $scope.fade === 'true',
              focusOnSelect: $scope.focusOnSelect === 'true',
              easing: $scope.easing || 'linear',
              edgeFriction: Number($scope.edgeFriction || 0.15),
              infinite: $scope.infinite !== 'false',
              initialSlide: $scope.initialSlide || 0,
              lazyLoad: $scope.lazyLoad || 'ondemand',
              mobileFirst: $scope.mobileFirst === 'true',
              pauseOnHover: $scope.pauseOnHover !== 'false',
              pauseOnDotsHover: $scope.pauseOnDotsHover === 'true',
              respondTo: $scope.respondTo || 'window',
              responsive: $scope.responsive || void 0,
              slide: $scope.slide || 'div',
              slidesToShow: $scope.slidesToShow != null ? parseInt($scope.slidesToShow, 10) : 1,
              slidesToScroll: $scope.slidesToScroll != null ? parseInt($scope.slidesToScroll, 10) : 1,
              speed: $scope.speed != null ? parseInt($scope.speed, 10) : 300,
              swipe: $scope.swipe !== 'false',
              swipeToSlide: $scope.swipeToSlide === 'true',
              touchMove: $scope.touchMove !== 'false',
              touchThreshold: $scope.touchThreshold ? parseInt($scope.touchThreshold, 10) : 5,
              useCSS: $scope.useCSS !== 'false',
              variableWidth: $scope.variableWidth === 'true',
              vertical: $scope.vertical === 'true',
              rtl: $scope.rtl === 'true'
            });
            slider.on('afterChange', function(e, slick, index) {
              if (attrs.onAfterChange) {
                $scope.onAfterChange({
                  event: e,
                  slick: slick,
                  index: index
                });
              }
              if ($scope.currentIndex != null) {
                return $scope.$apply(function() {
                  return $scope.currentIndex = index;
                });
              }
            });
            slider.on('beforeChange', function(e, slick, currentIndex, nextIndex) {
              if (attrs.onBeforeChange) {
                return $scope.onBeforeChange({
                  event: e,
                  slick: slick,
                  currentIndex: currentIndex,
                  nextIndex: nextIndex
                });
              }
            });
            slider.on('edge', function(e, slick, direction) {
              if (attrs.onEdge) {
                return $scope.onEdge({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            slider.on('init', function(e, slick) {
              if (attrs.onInit) {
                return $scope.onInit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('reInit', function(e, slick) {
              if (attrs.onReinit) {
                return $scope.onReinit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('setPosition', function(e, slick) {
              if (attrs.onSetPosition) {
                return $scope.onSetPosition({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('swipe', function(e, slick, direction) {
              if (attrs.onSwipe) {
                return $scope.onSwipe({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            return currentIndexWatch = $scope.$watch('currentIndex', function(newValue, oldValue) {
              if (newValue != null) {
                return slider.slick('slickGoTo', newValue);
              }
            });
          });
        };
        if ($scope.initOnload) {
          isInitialized = false;
          return $scope.$watch('data', function(newVal, oldVal) {
            if (newVal != null) {
              if (isInitialized) {
                destroySlick();
              }
              initializeSlick();
              return isInitialized = true;
            }
          });
        } else {
          return initializeSlick();
        }
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItc2xpY2suY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsZUFBZixFQUFnQyxFQUFoQyxDQUNJLENBQUMsU0FETCxDQUNlLE9BRGYsRUFDd0I7RUFDaEIsVUFEZ0IsRUFHaEIsU0FBQyxRQUFELEdBQUE7V0FDSTtBQUFBLE1BQUEsUUFBQSxFQUFVLEtBQVY7QUFBQSxNQUNBLEtBQUEsRUFDSTtBQUFBLFFBQUEsVUFBQSxFQUFZLEdBQVo7QUFBQSxRQUNBLElBQUEsRUFBTSxHQUROO0FBQUEsUUFFQSxZQUFBLEVBQWMsR0FGZDtBQUFBLFFBS0EsYUFBQSxFQUFlLEdBTGY7QUFBQSxRQU1BLGNBQUEsRUFBZ0IsR0FOaEI7QUFBQSxRQU9BLFFBQUEsRUFBVSxHQVBWO0FBQUEsUUFRQSxhQUFBLEVBQWUsR0FSZjtBQUFBLFFBU0EsTUFBQSxFQUFRLEdBVFI7QUFBQSxRQVVBLFFBQUEsRUFBVSxHQVZWO0FBQUEsUUFXQSxZQUFBLEVBQWMsR0FYZDtBQUFBLFFBWUEsU0FBQSxFQUFXLEdBWlg7QUFBQSxRQWFBLFNBQUEsRUFBVyxHQWJYO0FBQUEsUUFjQSxVQUFBLEVBQVksR0FkWjtBQUFBLFFBZUEsYUFBQSxFQUFlLEdBZmY7QUFBQSxRQWdCQSxPQUFBLEVBQVMsR0FoQlQ7QUFBQSxRQWlCQSxZQUFBLEVBQWMsR0FqQmQ7QUFBQSxRQWtCQSxJQUFBLEVBQU0sR0FsQk47QUFBQSxRQW1CQSxTQUFBLEVBQVcsR0FuQlg7QUFBQSxRQW9CQSxJQUFBLEVBQU0sR0FwQk47QUFBQSxRQXFCQSxhQUFBLEVBQWUsR0FyQmY7QUFBQSxRQXNCQSxNQUFBLEVBQVEsR0F0QlI7QUFBQSxRQXVCQSxZQUFBLEVBQWMsR0F2QmQ7QUFBQSxRQXdCQSxRQUFBLEVBQVUsR0F4QlY7QUFBQSxRQXlCQSxZQUFBLEVBQWMsR0F6QmQ7QUFBQSxRQTBCQSxRQUFBLEVBQVUsR0ExQlY7QUFBQSxRQTJCQSxXQUFBLEVBQWEsR0Ez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QUVBLFNBQUEsRUFBVyxTQUZYO2lCQURKLEVBQUE7ZUFEZTtZQUFBLENBQW5CLENBN0ZBLENBQUE7bUJBcUdBLGlCQUFBLEdBQW9CLE1BQU0sQ0FBQyxNQUFQLENBQWMsY0FBZCxFQUE4QixTQUFDLFFBQUQsRUFBVyxRQUFYLEdBQUE7QUFDOUMsY0FBQSxJQUFHLGdCQUFIO3VCQUNJLE1BQU0sQ0FBQyxLQUFQLENBQWEsV0FBYixFQUEwQixRQUExQixFQURKO2VBRDhDO1lBQUEsQ0FBOUIsRUF0R2Y7VUFBQSxDQUFULEVBRGM7UUFBQSxDQWJsQixDQUFBO0FBeUhBLFFBQUEsSUFBRyxNQUFNLENBQUMsVUFBVjtBQUNJLFVBQUEsYUFBQSxHQUFnQixLQUFoQixDQUFBO2lCQUVBLE1BQU0sQ0FBQyxNQUFQLENBQWMsTUFBZCxFQUFzQixTQUFDLE1BQUQsRUFBUyxNQUFULEdBQUE7QUFDbEIsWUFBQSxJQUFHLGNBQUg7QUFDSSxjQUFBLElBQWtCLGFBQWxCO0FBQUEsZ0JBQUEsWUFBQSxDQUFBLENBQUEsQ0FBQTtlQUFBO0FBQUEsY0FDQSxlQUFBLENBQUEsQ0FEQSxDQUFBO3FCQUVBLGFBQUEsR0FBZ0IsS0FIcEI7YUFEa0I7VUFBQSxDQUF0QixFQUhKO1NBQUEsTUFBQTtpQkFTSSxlQUFBLENBQUEsRUFUSjtTQTFIRTtNQUFBLENBeEROO01BREo7RUFBQSxDQUhnQjtDQUR4QixDQUFBLENBQUEiLCJmaWxlIjoiYW5ndWxhci1zbGljay5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyLXNsaWNrJywgW10pXG4gICAgLmRpcmVjdGl2ZSAnc2xpY2snLCBbXG4gICAgICAgICckdGltZW91dCdcblxuICAgICAgICAoJHRpbWVvdXQpLT5cbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQUVDJ1xuICAgICAgICAgICAgc2NvcGU6XG4gICAgICAgICAgICAgICAgaW5pdE9ubG9hZDogXCJAXCJcbiAgICAgICAgICAgICAgICBkYXRhOiBcIj1cIlxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleDogXCI9XCJcblxuICAgICAgICAgICAgICAgICMgUHJvcGVydGllc1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IFwiQFwiXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IFwiQFwiXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogXCJAXCJcbiAgICAgICAgICAgICAgICBhcnJvd3M6IFwiQFwiXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IFwiQFwiXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiBcIkBcIlxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogXCJAXCJcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6IFwiQFwiXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogXCJAXCJcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiBcIkBcIlxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6IFwiQFwiXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBcIiZcIlxuICAgICAgICAgICAgICAgIGRvdHM6IFwiQFwiXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBcIkBcIlxuICAgICAgICAgICAgICAgIGZhZGU6IFwiQFwiXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogXCJAXCJcbiAgICAgICAgICAgICAgICBlYXNpbmc6IFwiQFwiXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiBcIkBcIlxuICAgICAgICAgICAgICAgIGluZmluaXRlOiBcIkBcIlxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogXCI9XCJcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogXCJAXCJcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogXCJAXCJcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IFwiQFwiXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogXCJAXCJcbiAgICAgICAgICAgICAgICByZXNwb25kVG86IFwiQFwiXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogXCI9XCJcbiAgICAgICAgICAgICAgICBzbGlkZTogXCJAXCJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IFwiQFwiXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IFwiQFwiXG4gICAgICAgICAgICAgICAgc3BlZWQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgc3dpcGU6IFwiQFwiXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBcIkBcIlxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogXCJAXCJcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogXCJAXCJcbiAgICAgICAgICAgICAgICB1c2VDU1M6IFwiQFwiXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogXCJAXCJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogXCJAXCJcbiAgICAgICAgICAgICAgICBydGw6IFwiQFwiXG5cbiAgICAgICAgICAgICAgICAjIEV2ZW50c1xuICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6ICcmJ1xuICAgICAgICAgICAgICAgIG9uQmVmb3JlQ2hhbmdlOiAnJidcbiAgICAgICAgICAgICAgICBvbkVkZ2U6ICcmJ1xuICAgICAgICAgICAgICAgIG9uSW5pdDogJyYnXG4gICAgICAgICAgICAgICAgb25SZUluaXQ6ICcmJ1xuICAgICAgICAgICAgICAgIG9uU2V0UG9zaXRpb246ICcmJ1xuICAgICAgICAgICAgICAgIG9uU3dpcGU6ICcmJ1xuXG4gICAgICAgICAgICBsaW5rOiAoJHNjb3BlLCBlbGVtLCBhdHRycyktPlxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleFdhdGNoID0gLT5cblxuICAgICAgICAgICAgICAgIGRlc3Ryb3lTbGljayA9IC0+XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXhXYXRjaCgpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlciA9ICQoZWxlbSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnNsaWNrKCd1bnNsaWNrJylcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5maW5kKCcuc2xpY2stbGlzdCcpLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGlkZXJcblxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVTbGljayA9IC0+XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIgPSAkIGVsZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZyA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBhdHRycy5jdXN0b21QYWdpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmcgPSAoc2xpY2ssIGluZGV4KS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXN0b21QYWdpbmcgeyBzbGljazogc2xpY2ssIGluZGV4OiBpbmRleCB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5zbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6ICRzY29wZS5hY2Nlc3NpYmlsaXR5IGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiAkc2NvcGUuYWRhcHRpdmVIZWlnaHQgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6ICRzY29wZS5hdXRvcGxheSBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiBpZiAkc2NvcGUuYXV0b3BsYXlTcGVlZD8gdGhlbiBwYXJzZUludCgkc2NvcGUuYXV0b3BsYXlTcGVlZCwgMTApIGVsc2UgMzAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogJHNjb3BlLmFycm93cyBpc250ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc05hdkZvcjogaWYgJHNjb3BlLmFzTmF2Rm9yIHRoZW4gJHNjb3BlLmFzTmF2Rm9yIGVsc2UgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiBpZiAkc2NvcGUuYXBwZW5kQXJyb3dzIHRoZW4gJCgkc2NvcGUuYXBwZW5kQXJyb3dzKSBlbHNlICQoZWxlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2QXJyb3c6IGlmICRzY29wZS5wcmV2QXJyb3cgdGhlbiAkc2NvcGUucHJldkFycm93IGVsc2UgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93OiBpZiAkc2NvcGUubmV4dEFycm93IHRoZW4gJHNjb3BlLm5leHRBcnJvdyBlbHNlIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6ICRzY29wZS5jZW50ZXJNb2RlIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICRzY29wZS5jZW50ZXJQYWRkaW5nIG9yICc1MHB4J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICRzY29wZS5jc3NFYXNlIG9yICdlYXNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogY3VzdG9tUGFnaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG90czogJHNjb3BlLmRvdHMgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiAkc2NvcGUuZHJhZ2dhYmxlIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU6ICRzY29wZS5mYWRlIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6ICRzY29wZS5mb2N1c09uU2VsZWN0IGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhc2luZzogJHNjb3BlLmVhc2luZyBvciAnbGluZWFyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogTnVtYmVyKCRzY29wZS5lZGdlRnJpY3Rpb24gb3IgMC4xNSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZTogJHNjb3BlLmluZmluaXRlIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTokc2NvcGUuaW5pdGlhbFNsaWRlIG9yIDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXp5TG9hZDogJHNjb3BlLmxhenlMb2FkIG9yICdvbmRlbWFuZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogJHNjb3BlLm1vYmlsZUZpcnN0IGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogJHNjb3BlLnBhdXNlT25Ib3ZlciBpc250ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiAkc2NvcGUucGF1c2VPbkRvdHNIb3ZlciBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25kVG86ICRzY29wZS5yZXNwb25kVG8gb3IgJ3dpbmRvdydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlOiAkc2NvcGUucmVzcG9uc2l2ZSBvciB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZTogJHNjb3BlLnNsaWRlIG9yICdkaXYnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiBpZiAkc2NvcGUuc2xpZGVzVG9TaG93PyB0aGVuIHBhcnNlSW50KCRzY29wZS5zbGlkZXNUb1Nob3csIDEwKSBlbHNlIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogaWYgJHNjb3BlLnNsaWRlc1RvU2Nyb2xsPyB0aGVuIHBhcnNlSW50KCRzY29wZS5zbGlkZXNUb1Njcm9sbCwgMTApIGVsc2UgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiBpZiAkc2NvcGUuc3BlZWQ/IHRoZW4gcGFyc2VJbnQoJHNjb3BlLnNwZWVkLCAxMCkgZWxzZSAzMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2lwZTogJHNjb3BlLnN3aXBlIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogJHNjb3BlLnN3aXBlVG9TbGlkZSBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaE1vdmU6ICRzY29wZS50b3VjaE1vdmUgaXNudCAnZmFsc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IGlmICRzY29wZS50b3VjaFRocmVzaG9sZCB0aGVuIHBhcnNlSW50KCRzY29wZS50b3VjaFRocmVzaG9sZCwgMTApIGVsc2UgNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZUNTUzogJHNjb3BlLnVzZUNTUyBpc250ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiAkc2NvcGUudmFyaWFibGVXaWR0aCBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogJHNjb3BlLnZlcnRpY2FsIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ0bDogJHNjb3BlLnJ0bCBpcyAndHJ1ZSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgIyBFdmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAnYWZ0ZXJDaGFuZ2UnLCAoZSwgc2xpY2ssIGluZGV4KS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uQWZ0ZXJDaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNrOiBzbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGlmIGF0dHJzLm9uQWZ0ZXJDaGFuZ2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICRzY29wZS5jdXJyZW50SW5kZXg/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jdXJyZW50SW5kZXggPSBpbmRleFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ2JlZm9yZUNoYW5nZScsIChlLCBzbGljaywgY3VycmVudEluZGV4LCBuZXh0SW5kZXgpLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25CZWZvcmVDaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNrOiBzbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXg6IGN1cnJlbnRJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SW5kZXg6IG5leHRJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaWYgYXR0cnMub25CZWZvcmVDaGFuZ2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9uICdlZGdlJywgKGUsIHNsaWNrLCBkaXJlY3Rpb24pLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25FZGdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljazogc2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGlmIGF0dHJzLm9uRWRnZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ2luaXQnLCAoZSwgc2xpY2spLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25Jbml0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljazogc2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGlmIGF0dHJzLm9uSW5pdFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ3JlSW5pdCcsIChlLCBzbGljayktPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vblJlaW5pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2s6IHNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBpZiBhdHRycy5vblJlaW5pdFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ3NldFBvc2l0aW9uJywgKGUsIHNsaWNrKS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uU2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNrOiBzbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaWYgYXR0cnMub25TZXRQb3NpdGlvblxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ3N3aXBlJywgKGUsIHNsaWNrLCBkaXJlY3Rpb24pLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25Td2lwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2s6IHNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBpZiBhdHRycy5vblN3aXBlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICMgV2F0Y2ggRnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXhXYXRjaCA9ICRzY29wZS4kd2F0Y2ggJ2N1cnJlbnRJbmRleCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBuZXdWYWx1ZT9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnNsaWNrICdzbGlja0dvVG8nLCBuZXdWYWx1ZVxuXG5cbiAgICAgICAgICAgICAgICBpZiAkc2NvcGUuaW5pdE9ubG9hZFxuICAgICAgICAgICAgICAgICAgICBpc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoICdkYXRhJywgKG5ld1ZhbCwgb2xkVmFsKS0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBuZXdWYWw/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdHJveVNsaWNrKCkgaWYgaXNJbml0aWFsaXplZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVTbGljaygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNJbml0aWFsaXplZCA9IHRydWVcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVTbGljaygpXG4gICAgXSJdfQ==