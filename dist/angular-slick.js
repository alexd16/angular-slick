angular.module('angular-slick', []).directive('slick', [
  '$timeout', function($timeout) {
    return {
      restrict: 'AEC',
      $scope: {
        initOnload: "@",
        data: "=",
        currentIndex: "=",
        accessibility: "@",
        adaptiveHeight: "@",
        autoplay: "@",
        autoplaySpeed: "@",
        arrows: "@",
        asNavFor: "@",
        appendArrows: "@",
        prevArrow: "@",
        nextArrow: "@",
        centerMode: "@",
        centerPadding: "@",
        cssEase: "@",
        customPaging: "&",
        dots: "@",
        draggable: "@",
        fade: "@",
        focusOnSelect: "@",
        easing: "@",
        edgeFriction: "@",
        infinite: "@",
        initialSlide: "@",
        lazyLoad: "@",
        mobileFirst: "@",
        pauseOnHover: "@",
        pauseOnDotsHover: "@",
        respondTo: "@",
        responsive: "=",
        slide: "@",
        slidesToShow: "@",
        slidesToScroll: "@",
        speed: "@",
        swipe: "@",
        swipeToSlide: "@",
        touchMove: "@",
        touchThreshold: "@",
        useCSS: "@",
        variableWidth: "@",
        vertical: "@",
        rtl: "@",
        onAfterChange: '&',
        onBeforeChange: '&',
        onEdge: '&',
        onInit: '&',
        onReInit: '&',
        onSetPosition: '&',
        onSwipe: '&'
      },
      link: function($scope, elem, attrs) {
        var destroySlick, initializeSlick, isInitialized;
        destroySlick = function() {
          return $timeout(function() {
            var slider;
            slider = $(elem);
            slider.unslick();
            slider.find('.slick-list').remove();
            return slider;
          });
        };
        initializeSlick = function() {
          return $timeout(function() {
            var currentIndex, slider;
            slider = $(elem);
            if ($scope.currentIndex != null) {
              currentIndex = $scope.currentIndex;
            }
            slider.slick({
              accessibility: $scope.accessibility !== 'false',
              adaptiveHeight: $scope.adaptiveHeight === 'true',
              autoplay: $scope.autoplay === 'true',
              autoplaySpeed: $scope.autoplaySpeed != null ? parseInt($scope.autoplaySpeed, 10) : 3000,
              arrows: $scope.arrows !== 'false',
              asNavFor: $scope.asNavFor ? $scope.asNavFor : void 0,
              appendArrows: $scope.appendArrows ? $($scope.appendArrows) : $(elem),
              prevArrow: $scope.prevArrow ? $($scope.prevArrow) : void 0,
              nextArrow: $scope.nextArrow ? $($scope.nextArrow) : void 0,
              centerMode: $scope.centerMode === 'true',
              centerPadding: $scope.centerPadding || '50px',
              cssEase: $scope.cssEase || 'ease',
              customPaging: attrs.customPaging ? $scope.customPaging : void 0,
              dots: $scope.dots === 'true',
              draggable: $scope.draggable !== 'false',
              fade: $scope.fade === 'true',
              focusOnSelect: $scope.focusOnSelect === 'true',
              easing: $scope.easing || 'linear',
              edgeFriction: Number($scope.edgeFriction || 0.15),
              infinite: $scope.infinite !== 'false',
              initialSlide: $scope.initialSlide || 0,
              lazyLoad: $scope.lazyLoad || 'ondemand',
              mobileFirst: $scope.mobileFirst === 'true',
              pauseOnHover: $scope.pauseOnHover !== 'false',
              pauseOnDotsHover: $scope.pauseOnDotsHover === 'true',
              respondTo: $scope.respondTo || 'window',
              responsive: $scope.responsive || void 0,
              slide: $scope.slide || 'div',
              slidesToShow: Number($scope.slidesToShow || 1),
              slidesToScroll: Number($scope.slidesToScroll || 1),
              speed: Number($scope.speed || 300),
              swipe: $scope.swipe === 'true',
              swipeToSlide: $scope.swipeToSlide !== 'false',
              touchMove: $scope.touchMove === 'true',
              touchThreshold: Number($scope.touchThreshold || 5),
              useCSS: $scope.useCSS === 'true',
              variableWidth: $scope.variableWidth !== 'false',
              vertical: $scope.vertical !== 'false',
              rtl: $scope.rtl !== 'false'
            });
            slider.on('afterChange', function(e, slick, currentSlide) {
              return console.log(currentSlide);
            });
            return $scope.$watch('currentIndex', function(newValue, oldValue) {
              if ((newValue != null) && newValue !== oldValue) {
                return slider.slickGoTo(newValue);
              }
            });
          });
        };
        if ($scope.initOnload) {
          isInitialized = false;
          $scope.$watch('data', function(newVal, oldVal) {
            if (newVal != null) {
              if (isInitialized) {
                destroySlick();
              }
              initializeSlick();
              return isInitialized = true;
            }
          });
        } else {
          initializeSlick();
        }
        return $scope.$on('$destroy', function() {
          return destroySlick();
        });
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;base64,