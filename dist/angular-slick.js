angular.module('angular-slick', []).directive('slick', [
  '$timeout', function($timeout) {
    return {
      restrict: 'AEC',
      scope: {
        initOnload: "@",
        data: "=",
        currentIndex: "=",
        accessibility: "@",
        adaptiveHeight: "@",
        autoplay: "@",
        autoplaySpeed: "@",
        arrows: "@",
        asNavFor: "@",
        appendArrows: "@",
        prevArrow: "@",
        nextArrow: "@",
        centerMode: "@",
        centerPadding: "@",
        cssEase: "@",
        customPaging: "&",
        dots: "@",
        draggable: "@",
        fade: "@",
        focusOnSelect: "@",
        easing: "@",
        edgeFriction: "@",
        infinite: "@",
        initialSlide: "@",
        lazyLoad: "@",
        mobileFirst: "@",
        pauseOnHover: "@",
        pauseOnDotsHover: "@",
        respondTo: "@",
        responsive: "=",
        slide: "@",
        slidesToShow: "@",
        slidesToScroll: "@",
        speed: "@",
        swipe: "@",
        swipeToSlide: "@",
        touchMove: "@",
        touchThreshold: "@",
        useCSS: "@",
        variableWidth: "@",
        vertical: "@",
        rtl: "@",
        onAfterChange: '&',
        onBeforeChange: '&',
        onEdge: '&',
        onInit: '&',
        onReInit: '&',
        onSetPosition: '&',
        onSwipe: '&'
      },
      link: function($scope, elem, attrs) {
        var destroySlick, initializeSlick, isInitialized;
        destroySlick = function() {
          return $timeout(function() {
            var slider;
            slider = $(elem);
            slider.slick('unslick');
            slider.find('.slick-list').remove();
            return slider;
          });
        };
        initializeSlick = function() {
          return $timeout(function() {
            var customPaging, slider;
            slider = $(elem);
            customPaging = void 0;
            if (attrs.customPaging) {
              customPaging = function(slick, index) {
                return $scope.customPaging({
                  slick: slick,
                  index: index
                });
              };
            }
            slider.slick({
              accessibility: $scope.accessibility !== 'false',
              adaptiveHeight: $scope.adaptiveHeight === 'true',
              autoplay: $scope.autoplay === 'true',
              autoplaySpeed: $scope.autoplaySpeed != null ? parseInt($scope.autoplaySpeed, 10) : 3000,
              arrows: $scope.arrows !== 'false',
              asNavFor: $scope.asNavFor ? $scope.asNavFor : void 0,
              appendArrows: $scope.appendArrows ? $($scope.appendArrows) : $(elem),
              prevArrow: $scope.prevArrow ? $($scope.prevArrow) : void 0,
              nextArrow: $scope.nextArrow ? $($scope.nextArrow) : void 0,
              centerMode: $scope.centerMode === 'true',
              centerPadding: $scope.centerPadding || '50px',
              cssEase: $scope.cssEase || 'ease',
              customPaging: customPaging,
              dots: $scope.dots === 'true',
              draggable: $scope.draggable !== 'false',
              fade: $scope.fade === 'true',
              focusOnSelect: $scope.focusOnSelect === 'true',
              easing: $scope.easing || 'linear',
              edgeFriction: Number($scope.edgeFriction || 0.15),
              infinite: $scope.infinite !== 'false',
              initialSlide: $scope.initialSlide || 0,
              lazyLoad: $scope.lazyLoad || 'ondemand',
              mobileFirst: $scope.mobileFirst === 'true',
              pauseOnHover: $scope.pauseOnHover !== 'false',
              pauseOnDotsHover: $scope.pauseOnDotsHover === 'true',
              respondTo: $scope.respondTo || 'window',
              responsive: $scope.responsive || void 0,
              slide: $scope.slide || 'div',
              slidesToShow: $scope.slidesToShow != null ? parseInt($scope.slidesToShow, 10) : 1,
              slidesToScroll: $scope.slidesToScroll != null ? parseInt($scope.slidesToScroll, 10) : 1,
              speed: $scope.speed != null ? parseInt($scope.speed, 10) : 300,
              swipe: $scope.swipe !== 'false',
              swipeToSlide: $scope.swipeToSlide === 'true',
              touchMove: $scope.touchMove !== 'false',
              touchThreshold: $scope.touchThreshold ? parseInt($scope.touchThreshold, 10) : 5,
              useCSS: $scope.useCSS !== 'false',
              variableWidth: $scope.variableWidth === 'true',
              vertical: $scope.vertical === 'true',
              rtl: $scope.rtl === 'true'
            });
            slider.on('afterChange', function(e, slick, index) {
              if (attrs.onAfterChange) {
                $scope.onAfterChange({
                  event: e,
                  slick: slick,
                  index: index
                });
              }
              if ($scope.currentIndex != null) {
                return $scope.$apply(function() {
                  return $scope.currentIndex = index;
                });
              }
            });
            slider.on('beforeChange', function(e, slick, currentIndex, nextIndex) {
              if (attrs.onBeforeChange) {
                return $scope.onBeforeChange({
                  event: e,
                  slick: slick,
                  currentIndex: currentIndex,
                  nextIndex: nextIndex
                });
              }
            });
            slider.on('edge', function(e, slick, direction) {
              if (attrs.onEdge) {
                return $scope.onEdge({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            slider.on('init', function(e, slick) {
              if (attrs.onInit) {
                return $scope.onInit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('reInit', function(e, slick) {
              if (attrs.onReinit) {
                return $scope.onReinit({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('setPosition', function(e, slick) {
              if (attrs.onSetPosition) {
                return $scope.onSetPosition({
                  event: e,
                  slick: slick
                });
              }
            });
            slider.on('swipe', function(e, slick, direction) {
              if (attrs.onSwipe) {
                return $scope.onSwipe({
                  event: e,
                  slick: slick,
                  direction: direction
                });
              }
            });
            return $scope.$watch('currentIndex', function(newValue, oldValue) {
              if ((newValue != null) && newValue !== oldValue) {
                return slider.slick('slickGoTo', newValue);
              }
            });
          });
        };
        if ($scope.initOnload) {
          isInitialized = false;
          $scope.$watch('data', function(newVal, oldVal) {
            if (newVal != null) {
              if (isInitialized) {
                destroySlick();
              }
              initializeSlick();
              return isInitialized = true;
            }
          });
        } else {
          initializeSlick();
        }
        return $scope.$on('$destroy', function() {
          return destroySlick();
        });
      }
    };
  }
]);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItc2xpY2suY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxNQUFSLENBQWUsZUFBZixFQUFnQyxFQUFoQyxDQUNJLENBQUMsU0FETCxDQUNlLE9BRGYsRUFDd0I7RUFDaEIsVUFEZ0IsRUFHaEIsU0FBQyxRQUFELEdBQUE7V0FDSTtBQUFBLE1BQUEsUUFBQSxFQUFVLEtBQVY7QUFBQSxNQUNBLEtBQUEsRUFDSTtBQUFBLFFBQUEsVUFBQSxFQUFZLEdBQVo7QUFBQSxRQUNBLElBQUEsRUFBTSxHQUROO0FBQUEsUUFFQSxZQUFBLEVBQWMsR0FGZDtBQUFBLFFBS0EsYUFBQSxFQUFlLEdBTGY7QUFBQSxRQU1BLGNBQUEsRUFBZ0IsR0FOaEI7QUFBQSxRQU9BLFFBQUEsRUFBVSxHQVBWO0FBQUEsUUFRQSxhQUFBLEVBQWUsR0FSZjtBQUFBLFFBU0EsTUFBQSxFQUFRLEdBVFI7QUFBQSxRQVVBLFFBQUEsRUFBVSxHQVZWO0FBQUEsUUFXQSxZQUFBLEVBQWMsR0FYZDtBQUFBLFFBWUEsU0FBQSxFQUFXLEdBWlg7QUFBQSxRQWFBLFNBQUEsRUFBVyxHQWJYO0FBQUEsUUFjQSxVQUFBLEVBQVksR0FkWjtBQUFBLFFBZUEsYUFBQSxFQUFlLEdBZmY7QUFBQSxRQWdCQSxPQUFBLEVBQVMsR0FoQlQ7QUFBQSxRQWlCQSxZQUFBLEVBQWMsR0FqQmQ7QUFBQSxRQWtCQSxJQUFBLEVBQU0sR0FsQk47QUFBQSxRQW1CQSxTQUFBLEVBQVcsR0FuQlg7QUFBQSxRQW9CQSxJQUFBLEVBQU0sR0FwQk47QUFBQSxRQXFCQSxhQUFBLEVBQWUsR0FyQmY7QUFBQSxRQXNCQSxNQUFBLEVBQVEsR0F0QlI7QUFBQSxRQXVCQSxZQUFBLEVBQWMsR0F2QmQ7QUFBQSxRQXdCQSxRQUFBLEVBQVUsR0F4QlY7QUFBQSxRQXlCQSxZQUFBLEVBQWMsR0F6QmQ7QUFBQSxRQTBCQSxRQUFBLEVBQVUsR0ExQlY7QUFBQSxRQTJCQSxXQUFBLEVBQWEsR0Ez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QixDQTdGQSxDQUFBO21CQXFHQSxNQUFNLENBQUMsTUFBUCxDQUFjLGNBQWQsRUFBOEIsU0FBQyxRQUFELEVBQVcsUUFBWCxHQUFBO0FBQzFCLGNBQUEsSUFBRyxrQkFBQSxJQUFjLFFBQUEsS0FBYyxRQUEvQjt1QkFDSSxNQUFNLENBQUMsS0FBUCxDQUFhLFdBQWIsRUFBMEIsUUFBMUIsRUFESjtlQUQwQjtZQUFBLENBQTlCLEVBdEdLO1VBQUEsQ0FBVCxFQURjO1FBQUEsQ0FUbEIsQ0FBQTtBQXFIQSxRQUFBLElBQUcsTUFBTSxDQUFDLFVBQVY7QUFDSSxVQUFBLGFBQUEsR0FBZ0IsS0FBaEIsQ0FBQTtBQUFBLFVBRUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxNQUFkLEVBQXNCLFNBQUMsTUFBRCxFQUFTLE1BQVQsR0FBQTtBQUNsQixZQUFBLElBQUcsY0FBSDtBQUNJLGNBQUEsSUFBa0IsYUFBbEI7QUFBQSxnQkFBQSxZQUFBLENBQUEsQ0FBQSxDQUFBO2VBQUE7QUFBQSxjQUNBLGVBQUEsQ0FBQSxDQURBLENBQUE7cUJBRUEsYUFBQSxHQUFnQixLQUhwQjthQURrQjtVQUFBLENBQXRCLENBRkEsQ0FESjtTQUFBLE1BQUE7QUFTSSxVQUFBLGVBQUEsQ0FBQSxDQUFBLENBVEo7U0FySEE7ZUFpSUEsTUFBTSxDQUFDLEdBQVAsQ0FBVyxVQUFYLEVBQXVCLFNBQUEsR0FBQTtpQkFDbkIsWUFBQSxDQUFBLEVBRG1CO1FBQUEsQ0FBdkIsRUFsSUU7TUFBQSxDQXhETjtNQURKO0VBQUEsQ0FIZ0I7Q0FEeEIsQ0FBQSxDQUFBIiwiZmlsZSI6ImFuZ3VsYXItc2xpY2suanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZSgnYW5ndWxhci1zbGljaycsIFtdKVxuICAgIC5kaXJlY3RpdmUgJ3NsaWNrJywgW1xuICAgICAgICAnJHRpbWVvdXQnXG5cbiAgICAgICAgKCR0aW1lb3V0KS0+XG4gICAgICAgICAgICByZXN0cmljdDogJ0FFQydcbiAgICAgICAgICAgIHNjb3BlOlxuICAgICAgICAgICAgICAgIGluaXRPbmxvYWQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgZGF0YTogXCI9XCJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXg6IFwiPVwiXG5cbiAgICAgICAgICAgICAgICAjIFByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiBcIkBcIlxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBcIkBcIlxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBcIkBcIlxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgYXJyb3dzOiBcIkBcIlxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBcIkBcIlxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogXCJAXCJcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6IFwiQFwiXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiBcIkBcIlxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IFwiQFwiXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogXCJAXCJcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiBcIkBcIlxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogXCImXCJcbiAgICAgICAgICAgICAgICBkb3RzOiBcIkBcIlxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogXCJAXCJcbiAgICAgICAgICAgICAgICBmYWRlOiBcIkBcIlxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IFwiQFwiXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBcIkBcIlxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogXCJAXCJcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogXCJAXCJcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IFwiQFwiXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IFwiQFwiXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiBcIkBcIlxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IFwiQFwiXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiBcIkBcIlxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IFwiPVwiXG4gICAgICAgICAgICAgICAgc2xpZGU6IFwiQFwiXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiBcIkBcIlxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiBcIkBcIlxuICAgICAgICAgICAgICAgIHNwZWVkOiBcIkBcIlxuICAgICAgICAgICAgICAgIHN3aXBlOiBcIkBcIlxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogXCJAXCJcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IFwiQFwiXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IFwiQFwiXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiBcIkBcIlxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IFwiQFwiXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IFwiQFwiXG4gICAgICAgICAgICAgICAgcnRsOiBcIkBcIlxuXG4gICAgICAgICAgICAgICAgIyBFdmVudHNcbiAgICAgICAgICAgICAgICBvbkFmdGVyQ2hhbmdlOiAnJidcbiAgICAgICAgICAgICAgICBvbkJlZm9yZUNoYW5nZTogJyYnXG4gICAgICAgICAgICAgICAgb25FZGdlOiAnJidcbiAgICAgICAgICAgICAgICBvbkluaXQ6ICcmJ1xuICAgICAgICAgICAgICAgIG9uUmVJbml0OiAnJidcbiAgICAgICAgICAgICAgICBvblNldFBvc2l0aW9uOiAnJidcbiAgICAgICAgICAgICAgICBvblN3aXBlOiAnJidcblxuICAgICAgICAgICAgbGluazogKCRzY29wZSwgZWxlbSwgYXR0cnMpLT5cbiAgICAgICAgICAgICAgICBkZXN0cm95U2xpY2sgPSAtPlxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyID0gJChlbGVtKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIuc2xpY2soJ3Vuc2xpY2snKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLmZpbmQoJy5zbGljay1saXN0JykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlclxuXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZVNsaWNrID0gLT5cbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlciA9ICQgZWxlbVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGF0dHJzLmN1c3RvbVBhZ2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZyA9IChzbGljaywgaW5kZXgpLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1c3RvbVBhZ2luZyB7IHNsaWNrOiBzbGljaywgaW5kZXg6IGluZGV4IH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogJHNjb3BlLmFjY2Vzc2liaWxpdHkgaXNudCAnZmFsc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6ICRzY29wZS5hZGFwdGl2ZUhlaWdodCBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogJHNjb3BlLmF1dG9wbGF5IGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IGlmICRzY29wZS5hdXRvcGxheVNwZWVkPyB0aGVuIHBhcnNlSW50KCRzY29wZS5hdXRvcGxheVNwZWVkLCAxMCkgZWxzZSAzMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dzOiAkc2NvcGUuYXJyb3dzIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBpZiAkc2NvcGUuYXNOYXZGb3IgdGhlbiAkc2NvcGUuYXNOYXZGb3IgZWxzZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6IGlmICRzY29wZS5hcHBlbmRBcnJvd3MgdGhlbiAkKCRzY29wZS5hcHBlbmRBcnJvd3MpIGVsc2UgJChlbGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZBcnJvdzogaWYgJHNjb3BlLnByZXZBcnJvdyB0aGVuICQoJHNjb3BlLnByZXZBcnJvdykgZWxzZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QXJyb3c6IGlmICRzY29wZS5uZXh0QXJyb3cgdGhlbiAkKCRzY29wZS5uZXh0QXJyb3cpIGVsc2UgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyTW9kZTogJHNjb3BlLmNlbnRlck1vZGUgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJHNjb3BlLmNlbnRlclBhZGRpbmcgb3IgJzUwcHgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzRWFzZTogJHNjb3BlLmNzc0Vhc2Ugb3IgJ2Vhc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBjdXN0b21QYWdpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3RzOiAkc2NvcGUuZG90cyBpcyAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU6ICRzY29wZS5kcmFnZ2FibGUgaXNudCAnZmFsc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFkZTogJHNjb3BlLmZhZGUgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogJHNjb3BlLmZvY3VzT25TZWxlY3QgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiAkc2NvcGUuZWFzaW5nIG9yICdsaW5lYXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiBOdW1iZXIoJHNjb3BlLmVkZ2VGcmljdGlvbiBvciAwLjE1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlOiAkc2NvcGUuaW5maW5pdGUgaXNudCAnZmFsc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiRzY29wZS5pbml0aWFsU2xpZGUgb3IgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhenlMb2FkOiAkc2NvcGUubGF6eUxvYWQgb3IgJ29uZGVtYW5kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiAkc2NvcGUubW9iaWxlRmlyc3QgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiAkc2NvcGUucGF1c2VPbkhvdmVyIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6ICRzY29wZS5wYXVzZU9uRG90c0hvdmVyIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJHNjb3BlLnJlc3BvbmRUbyBvciAnd2luZG93J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6ICRzY29wZS5yZXNwb25zaXZlIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlOiAkc2NvcGUuc2xpZGUgb3IgJ2RpdidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IGlmICRzY29wZS5zbGlkZXNUb1Nob3c/IHRoZW4gcGFyc2VJbnQoJHNjb3BlLnNsaWRlc1RvU2hvdywgMTApIGVsc2UgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiBpZiAkc2NvcGUuc2xpZGVzVG9TY3JvbGw/IHRoZW4gcGFyc2VJbnQoJHNjb3BlLnNsaWRlc1RvU2Nyb2xsLCAxMCkgZWxzZSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IGlmICRzY29wZS5zcGVlZD8gdGhlbiBwYXJzZUludCgkc2NvcGUuc3BlZWQsIDEwKSBlbHNlIDMwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlOiAkc2NvcGUuc3dpcGUgaXNudCAnZmFsc2UnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiAkc2NvcGUuc3dpcGVUb1NsaWRlIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogJHNjb3BlLnRvdWNoTW92ZSBpc250ICdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogaWYgJHNjb3BlLnRvdWNoVGhyZXNob2xkIHRoZW4gcGFyc2VJbnQoJHNjb3BlLnRvdWNoVGhyZXNob2xkLCAxMCkgZWxzZSA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlQ1NTOiAkc2NvcGUudXNlQ1NTIGlzbnQgJ2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6ICRzY29wZS52YXJpYWJsZVdpZHRoIGlzICd0cnVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsOiAkc2NvcGUudmVydGljYWwgaXMgJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnRsOiAkc2NvcGUucnRsIGlzICd0cnVlJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAjIEV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLm9uICdhZnRlckNoYW5nZScsIChlLCBzbGljaywgaW5kZXgpLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25BZnRlckNoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2s6IHNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaWYgYXR0cnMub25BZnRlckNoYW5nZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgJHNjb3BlLmN1cnJlbnRJbmRleD9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRJbmRleCA9IGluZGV4XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAnYmVmb3JlQ2hhbmdlJywgKGUsIHNsaWNrLCBjdXJyZW50SW5kZXgsIG5leHRJbmRleCktPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vbkJlZm9yZUNoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2s6IHNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleDogY3VycmVudEluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJbmRleDogbmV4dEluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBpZiBhdHRycy5vbkJlZm9yZUNoYW5nZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXIub24gJ2VkZ2UnLCAoZSwgc2xpY2ssIGRpcmVjdGlvbiktPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vbkVkZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNrOiBzbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaWYgYXR0cnMub25FZGdlXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAnaW5pdCcsIChlLCBzbGljayktPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vbkluaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNrOiBzbGlja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgaWYgYXR0cnMub25Jbml0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAncmVJbml0JywgKGUsIHNsaWNrKS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9uUmVpbml0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljazogc2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGlmIGF0dHJzLm9uUmVpbml0XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAnc2V0UG9zaXRpb24nLCAoZSwgc2xpY2spLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub25TZXRQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2s6IHNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSBpZiBhdHRycy5vblNldFBvc2l0aW9uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlci5vbiAnc3dpcGUnLCAoZSwgc2xpY2ssIGRpcmVjdGlvbiktPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vblN3aXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGljazogc2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIGlmIGF0dHJzLm9uU3dpcGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgIyBXYXRjaCBGdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2ggJ2N1cnJlbnRJbmRleCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBuZXdWYWx1ZT8gYW5kIG5ld1ZhbHVlIGlzbnQgb2xkVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVyLnNsaWNrICdzbGlja0dvVG8nLCBuZXdWYWx1ZVxuXG5cbiAgICAgICAgICAgICAgICBpZiAkc2NvcGUuaW5pdE9ubG9hZFxuICAgICAgICAgICAgICAgICAgICBpc0luaXRpYWxpemVkID0gZmFsc2VcblxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoICdkYXRhJywgKG5ld1ZhbCwgb2xkVmFsKS0+XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBuZXdWYWw/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzdHJveVNsaWNrKCkgaWYgaXNJbml0aWFsaXplZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVTbGljaygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNJbml0aWFsaXplZCA9IHRydWVcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVTbGljaygpXG5cbiAgICAgICAgICAgICAgICAjIE9uIERlc3Ryb3lcbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uICckZGVzdHJveScsIC0+XG4gICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lTbGljaygpXG4gICAgXSJdfQ==